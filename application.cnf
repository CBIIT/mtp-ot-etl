
spark-uri = "local[*]"
spark-settings.write-mode = "error"
common.output-format = "json"

data_version = "22.04"
common.output = /Users/cheny39/Documents/work/22.04/output/
common.input = /Users/cheny39/Documents/work/22.04/input/
pis_date = "2022-04-21"

evidences.data-sources-exclude = ["ot_crispr", "encore", "ot_crispr_validation"]
etl-dag.resolve = false

chembl_version = "30"
// This Should be 'pis_date', but 'drug' step has to run within EBI infrastructure, and it happened on a different date
// chembl_date = pis_date
chembl_date = "2022-04-22"


etl-dag {
  // Resolve specifies whether a dependency tree should be created and upstream steps run automatically. If set to true
  // 'upstream' steps will be run automatically. For example, selecting 'target' will results in 'reactome' and 'target'
  // being run automatically. If resolve is set to false only specified steps will be run and it is the responsibility
  // of the user to ensure that the required dependencies are available.
  resolve = true

  steps = [
    {step: "disease", dependencies: []},
    {step: "reactome", dependencies: []},
    {step: "expression", dependencies: []},
    {step: "go", dependencies: []},
    {step: "target", dependencies: ["reactome"]},
    {step: "interaction", dependencies: ["target"]},
    {step: "targetValidation", dependencies: ["target"]},
    {step: "evidence", dependencies: []},
    {step: "association", dependencies: []},
    {step: "associationOTF", dependencies: []},
    {step: "drug", dependencies: []},
    {step: "search", dependencies: []},
    {step: "knownDrug", dependencies: []},
    {step: "ebisearch", dependencies: ["search","knownDrug"]},
    {step: "fda", dependencies: ["drug"]},
  ]
}

common {
  output-format = "json"
  output = "s3a://mtp-metadata/etl-s3-test"
  output = ${?OT_ETL_OUTPUT}

  metadata {
    format = "json"
    path = ${common.output}"/metadata/"
  }

  input = "s3a://mtp-metadata/ot_2209/input"
  error = ${common.output}"/errors/"

}

drug.chembl-indication.path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_drug_indication-"${chembl_date}".jsonl"
drug.chembl-warning.path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_drug_warning-"${chembl_date}".jsonl"
drug.chembl-mechanism.path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_mechanism-"${chembl_date}".jsonl"
drug.chembl-molecule.path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_molecule-"${chembl_date}".jsonl"
drug.chembl-target.path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_target-"${chembl_date}".jsonl"
drug.drugbank-to-chembl.path = ${common.input}"/chembl-inputs/drugbank-2020-06-01.csv.gz"

expression.binned.path = ${common.input}"/expression-inputs/baseline_expression_binned-2020-05-07.tsv"
expression.rna.path = ${common.input}"/expression-inputs/baseline_expression_counts-2020-05-07.tsv"
expression.zscore.path = ${common.input}"/expression-inputs/baseline_expression_zscore_binned-2020-05-07.tsv"
expression.exprhierarchy.path = ${common.input}"/expression-inputs/expression_hierarchy_curation-"${pis_date}".tsv"
expression.tissues.path = ${common.input}"/expression-inputs/normal_tissue-"${pis_date}".tsv.gz"
expression.efomap.path = ${common.input}"/expression-inputs/tissue-translation-map-"${pis_date}".json"

gene-ontology.go-input.path = ${common.input}"/gene-ontology-inputs/go.obo"

interactions.strings.path = ${common.input}"/interactions-inputs/9606.protein.links.full_w_homology.v11.5.txt.gz"
interactions.humanmapping.path = ${common.input}"/interactions-inputs/HUMAN_9606_idmapping.dat.gz"
interactions.ensproteins.path = ${common.input}"/interactions-inputs/Homo_sapiens.GRCh38.chr.gtf.gz"
interactions.intact.path = ${common.input}"/interactions-inputs/intact-interactors-"${pis_date}".json"
interactions.rnacentral.path = ${common.input}"/interactions-inputs/rna_central_ensembl.tsv"

disease.hpo-phenotype.path = ${common.input}"/ontology-inputs/hpo-phenotypes-"${pis_date}".jsonl"
disease.efo-ontology.path = ${common.input}"/ontology-inputs/ontology-efo-v3.40.0.jsonl"
disease.hpo-ontology.path = ${common.input}"/ontology-inputs/ontology-hpo.jsonl"
disease.mondo-ontology.path = ${common.input}"/ontology-inputs/ontology-mondo.jsonl"

reactome.inputs.pathways.path = ${common.input}"/reactome-inputs/ReactomePathways-"${pis_date}".txt"
reactome.inputs.relations.path = ${common.input}"/reactome-inputs/ReactomePathwaysRelation-"${pis_date}".txt"

target.input.chemical-probes.path = ${common.input}"/target-inputs/chemicalprobes/chemicalprobes-2022-01-25.json"
target.input.ensembl.path = ${common.input}"/target-inputs/ensembl/homo_sapiens.jsonl"
target.input.hgnc.path = ${common.input}"/target-inputs/genenames/hgnc_complete_set-"${pis_date}".json"
target.input.genetic-constraints.path = ${common.input}"/target-inputs/gnomad/gnomad_lof_by_gene.txt.gz"
target.input.gene-ontology-rna-lookup.path = ${common.input}"/target-inputs/go/ensembl.tsv"
target.input.gene-ontology.path = ${common.input}"/target-inputs/go/goa_human.gaf.gz"
target.input.gene-ontology-eco.path = ${common.input}"/target-inputs/go/goa_human_eco.gpa.gz"
target.input.gene-ontology-rna.path = ${common.input}"/target-inputs/go/goa_human_rna.gaf.gz"
target.input.hallmarks.path = ${common.input}"/target-inputs/hallmarks/cosmic-hallmarks-2022-04-01.tsv.gz"
target.input.homology-dictionary.path = ${common.input}"/target-inputs/homologue/species_EnsemblVertebrates.txt"
target.input.homology-coding-proteins.path = ${common.input}"/target-inputs/homologue/c*.tsv.gz"
target.input.homology-gene-dictionary.path = ${common.input}"/target-inputs/homologue/105/105-*.tsv"
target.input.hpa.path = ${common.input}"/target-inputs/hpa/subcellular_location.tsv.gz"
target.input.hpa-sl-ontology.path = ${common.input}"/target-inputs/hpa/subcellular_locations_ssl-2021-08-19.tsv"
target.input.ncbi.path = ${common.input}"/target-inputs/ncbi/Homo_sapiens.gene_info.gz"
target.input.ps-essentiality-matrix.path = ${common.input}"/target-inputs/project-scores/04_binaryDepScores.tsv"
target.input.ps-gene-identifier.path = ${common.input}"/target-inputs/project-scores/gene_identifiers_latest.csv.gz"
target.input.reactome-pathways.path = ${common.input}"/target-inputs/reactome/Ensembl2Reactome.txt"
target.input.safety-adverse-event.path = ${common.input}"/target-inputs/safety/adverse_events/adverse_event_safety-2021-11-03.json"
target.input.safety-safety-risk.path = ${common.input}"/target-inputs/safety/safety_risk/sr-2021-11-03.json"
target.input.safety-toxicity.path = ${common.input}"/target-inputs/safety/toxcast/ToxCast-2021-08-17.tsv"
target.input.tep.path = ${common.input}"/target-inputs/tep/tep-2022-04-11.json.gz"
target.input.tractability.path = ${common.input}"/target-inputs/tractability/tractability-2022-03-16.tsv"
target.input.uniprot.path = ${common.input}"/target-inputs/uniprot/uniprot-"${pis_date}".txt.gz"
target.input.uniprot-ssl.path = ${common.input}"/target-inputs/uniprot/uniprot-ssl-"${pis_date}".tsv.gz"

target-validation.inputs = [
  {
    name = "mousePhenotypes"
    id-column = "targetFromSourceId"
    data = {
      format = "json"
      path = ${common.input}"/mouse-phenotypes-inputs/mouse_phenotypes-2022-04-11.json.gz"
    }
  }
]


reactome {
  inputs {
    pathways {
      format = "csv"
      path = ${common.input}"/reactome-inputs/ReactomePathways-2021-09-22.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
    relations {
      format = "csv"
      path = ${common.input}"/reactome-inputs/ReactomePathwaysRelation-2021-09-22.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/reactome"
  }
}

expression {
  rna {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_counts-2020-05-07.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  binned {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_binned-2020-05-07.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  zscore {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_zscore_binned-2020-05-07.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  exprhierarchy {
    format = "csv"
    path = ${common.input}"/expression-inputs/expression_hierarchy_curation-2021-09-22.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
      {k: "inferSchema", v: "true"}
    ]
  }
  efomap {
    format = "json"
    path = ${common.input}"/expression-inputs/map_with_efos-2021-09-22.json"
  }
  tissues {
    format = "csv"
    path = ${common.input}"/expression-inputs/normal_tissue-2021-09-22.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/baselineExpression"
  }
}

interactions {
  scorethreshold = 0
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  rnacentral {
    format = "csv"
    path = ${common.input}"/interactions-inputs/rna_central_ensembl.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  humanmapping {
    format = "csv"
    path = ${common.input}"/interactions-inputs/HUMAN_9606_idmapping.dat.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  ensproteins {
    format = "csv"
    path = ${common.input}"/interactions-inputs/Homo_sapiens.GRCh38.chr.gtf.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"},
      {k: "comment", v: "#"}
    ]
  }
  intact {
    format = "json"
    path = ${common.input}"/interactions-inputs/intact-interactors-2021-09-15.json"
  }
  strings {
    format = "csv"
    path = ${common.input}"/interactions-inputs/9606.protein.links.full_w_homology.v11.0.txt.gz"
    options = [
      {k: "sep", v: " "},
      {k: "header", v: "true"}
    ]
  }
  outputs = {
    interactions {
      format = ${common.output-format}
      path = ${common.output}"/interaction"
    }
    interactions-evidence {
      format = ${common.output-format}
      path = ${common.output}"/interactionEvidence"
    }
    interactions-unmatched {
      format = ${common.output-format}
      path = ${common.error}"/interaction"
      generate-metadata = false
    }
  }
}

target {
  input {
    chembl = ${drug.chembl-target}
    chemical-probes = {
      format = "json"
      path = ${common.input}"/target-inputs/chemicalprobes-2021-09-17.json"
    }
    ensembl {
      format = "json"
      path = ${common.input}"/target-inputs/ensembl/homo_sapiens_104.jsonl"
    }
    genetic-constraints = {
      format = "csv"
      path = ${common.input}"/target-inputs/gnomad/gnomad_lof_by_gene.csv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
        {k: "nullValue", v: "NA"}
      ]
    }
    gene-ontology {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human_rna.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna-lookup {
      format = "csv"
      path = ${common.input}"/target-inputs/go/ensembl.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    gene-ontology-eco {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human_eco.gpa.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "comment", v: "!"}
      ]
    }
    hallmarks {
      format = "csv"
      path = ${common.input}"/target-inputs/hallmarks/cosmic-hallmarks-*.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hgnc {
      format = "json"
      path = ${common.input}"/target-inputs/hgnc_complete_set-2021-09-22.json"
    },
    homology-dictionary {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/species_EnsemblVertebrates.txt"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-coding-proteins {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/104/*.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-gene-dictionary {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/104/104-*.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    hpa {
      format = "csv"
      path = ${common.input}"/target-inputs/hpa/subcellular_location.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hpa-sl-ontology {
      format = "csv"
      path = ${common.input}"/target-inputs/hpa/subcellular_locations_ssl-2021-08-19.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ncbi {
      format = "csv"
      path = ${common.input}"/target-inputs/ncbi/Homo_sapiens.gene_info.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ps-gene-identifier {
      format = "csv"
      path = ${common.input}"/target-inputs/projectScores/gene_identifiers_latest.csv.gz"
      options = [
        {k: "header", v: true}
      ]
    }
    ps-essentiality-matrix {
      format = "csv"
      path = ${common.input}"/target-inputs/projectScores/04_binaryDepScores.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    reactome-etl = {
      format = ${common.output-format}
      path = ${common.output}"/reactome/part*"
    }
    reactome-pathways = {
      format = "csv"
      path = ${common.input}"/target-inputs/reactome/Ensembl2Reactome.txt"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    safety-toxicity {
      format = "csv"
      path = ${common.input}"/target-inputs/safety/ToxCast_2021-08-17.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    safety-adverse-event {
      format = "json"
      path = ${common.input}"/target-inputs/safety/ae_2021-11-03.json"
    }
    safety-safety-risk {
      format = "json"
      path = ${common.input}"/target-inputs/safety/sr_safety/sr-2021-11-03.json"
    }
    tep {
      format = "json"
      path = ${common.input}"/target-inputs/tep-2021-09-10.json.gz"
    },
    tractability = {
      format = "csv"
      path = ${common.input}"/target-inputs/tractability/tracta*tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    uniprot {
      format = "txt"
      path = ${common.input}"/target-inputs/uniprot-2021-09-22.txt"
    }
    uniprot-ssl {
      format = "csv"
      path = ${common.input}"/target-inputs/uniport/uniport-ssl*.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
  }
  outputs {
    target {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
  }
  hgnc-ortholog-species = [
    "9606-human",
    "9598-chimpanzee",
    "9544-macaque",
    "10090-mouse",
    "10116-rat",
    "9986-rabbit",
    "10141-guineapig",
    "9615-dog",
    "9823-pig",
    "8364-frog",
    "7955-zebrafish",
    "7227-fly",
    "6239-worm",
  ]
}

target-validation {
  inputs = [
    {
      name = "mousePhenotypes"
      id-column = "targetFromSourceId"
      data = {
        format = "json"
        path = ${common.input}"/mouse-phenotypes-inputs/mousePhenotypes-2021-11-02.json.gz"
      }
    }
  ]
  target = ${target.outputs.target}
  output {
    succeeded {
      format = ${common.output-format}
      path = ${common.output}
    }
    failed {
      format = ${common.output-format}
      path = ${common.error}
      generate-metadata = false
    }
  }
}

disease {
  efo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-efo-v3.40.0.jsonl"
  }
  hpo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-hpo.jsonl"
  }
  mondo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-mondo.jsonl"
  }
  hpo-phenotype {
    format = "json"
    path = ${common.input}"/ontology-inputs/hpo-phenotypes-2022-04-21.jsonl"
  }
  outputs = {
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    hpo {
      format = ${common.output-format}
      path = ${common.output}"/hpo"
    }
    disease-hpo {
      format = ${common.output-format}
      path = ${common.output}"/diseaseToPhenotype"
    }
  }
}

drug {
  chembl-molecule {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_30_molecule-2022-04-22.jsonl"
  }
  chembl-indication {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_30_drug_indication-2022-04-22.jsonl"
  }
  chembl-mechanism {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_30_mechanism-2022-04-22.jsonl"
  }
  chembl-target {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_30_target-2022-04-22.jsonl"
  }
  chembl-warning {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_30_drug_warning-2022-04-22.jsonl"
  }
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  evidence-etl = ${evidences.outputs.succeeded}
  drugbank-to-chembl {
    format = "csv"
    path = ${common.input}"/chembl-inputs/drugbank-2020-06-01.csv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
    ]
  }
  drug-extensions = []
  outputs = {
    drug {
      format = ${common.output-format}
      path = ${common.output}"/molecule"
    }
    mechanism-of-action {
      format = ${common.output-format}
      path = ${common.output}"/mechanismOfAction"
    }
    indications {
      format = ${common.output-format}
      path = ${common.output}"/indication"
    }
    warnings {
      format = ${common.output-format}
      path = ${common.output}"/drugWarnings"
    }
  }
}

known-drugs {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/knownDrugsAggregated"
  }
}

evidences {
  outputs {
    succeeded {
      format = ${common.output-format}
      path = "s3://mtp-metadata/etl-s3-test/evidence"
      partition-by = ["sourceId"]
    }
    failed {
      format = ${common.output-format}
      path = "s3://mtp-metadata/etl-s3-test/error"
      partition-by = ["sourceId"]
      generate-metadata = false
    }
  }

  inputs {
    raw-evidences {
      format = "json"
      path = "s3a://mtp-metadata/ot_2209/input/evidence-files/"
    }
    diseases {
      format = ${common.output-format}
      path = "s3a://mtp-metadata/ot_2209/output/diseases/"
    }
    targets {
      format = ${common.output-format}
      path = "s3a://mtp-metadata/ot_2209/output/targets/"
    }
  }

  unique-fields = [
    "targetId",
    "targetFromSourceId",
    "diseaseId",
    "datasourceId"
  ]
  score-expr = "resourceScore"
  datatype-id = "other"
  data-sources-exclude = []
  data-sources = [
  {
      id: "chop_variant_level_snv",
      unique-fields: [
       "chop_uuid"
      ],
      score-expr: "0"
  },
  {
      id: "chop_gene_level_cnv",
      unique-fields: [
       "chop_uuid"
      ],
      score-expr: "0"
  },
  {
      id: "chop_gene_level_snv",
      unique-fields: [
         "chop_uuid"
      ],
      score-expr: "0"
  },
  {
      id: "chop_putative_oncogene_fusion",
      unique-fields: [
         "chop_uuid"
      ],
      score-expr: "0"
  },
  {
      id: "chop_putative_oncogene_fused_gene",
      unique-fields: [
        "chop_uuid"
      ],
      score-expr: "0"
  },
    {
      id: "chembl",
      unique-fields: [
        "drugId",
        "urls.url"
      ],
      score-expr: """
        element_at(map(0, 0.09, 1, 0.1, 2, 0.2, 3, 0.7, 4, 1.0), clinicalPhase) *
        case
        when studyStopReasonCategories is null then
          double(1.0)
        else
          array_min(
            transform(
              studyStopReasonCategories,
                x -> element_at(
                  map(
                      'Another study', double(1.0),
                      'Business or administrative', double(1.0),
                      'COVID-19', double(1.0),
                      'Ethical reason', double(1.0),
                      'Insufficient data', double(1.0),
                      'Insufficient enrollment', double(1.0),
                      'Interim analysis', double(1.0),
                      'Invalid reason', double(1.0),
                      'Logistics or resources', double(1.0),
                      'Met endpoint', double(1.0),
                      'Negative', double(0.5),
                      'No context', double(1.0),
                      'Regulatory', double(1.0),
                      'Safety or side effects', double(0.5),
                      'Study design', double(1.0),
                      'Study staff moved', double(1.0),
                      'Success', double(1.0)
                  ),
               x)
             )
           )
        end
      """
    },
    {
      id: "europepmc",
      unique-fields: [
        "literature"
      ],
      score-expr: "array_min(array(resourceScore / 100.0, 1.0))"
    },
    {
      id: "eva",
      datatype-id: "genetic_association",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      id: "eva_somatic",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      excluded-biotypes: [
        "IG_C_pseudogene",
        "IG_J_pseudogene",
        "IG_pseudogene",
        "IG_V_pseudogene",
        "polymorphic_pseudogene",
        "processed_pseudogene",
        "pseudogene",
        "rRNA",
        "rRNA_pseudogene",
        "snoRNA",
        "snRNA",
        "transcribed_processed_pseudogene",
        "transcribed_unitary_pseudogene",
        "transcribed_unprocessed_pseudogene",
        "TR_J_pseudogene",
        "TR_V_pseudogene",
        "unitary_pseudogene",
        "unprocessed_pseudogene"
      ],
      id: "expression_atlas",
      unique-fields: [
        "contrast",
        "studyId"
      ],
      score-expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
    },
    {
      id: "gene_burden",
      datatype-id: "genetic_association",
      unique-fields: [
        "ancestryId",
        "diseaseFromSource"
        "statisticalMethod",
        "projectId"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-7, 1e-17, 0.25, 1.0)"
    },
    {
      id: "gene2phenotype",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "allelicRequirements",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'definitive', 1.0,
          'both RD and IF', 1.0,
          'strong', 1.0,
          'moderate', 0.5,
          'limited', 0.01
        ),
        confidence
      )
      """
    },
    {
      id: "genomics_england",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'amber', 0.5,
          'green', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "intogen",
      unique-fields: [
        "cohortShortName"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
    },
    {
      id: "ot_genetics_portal",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "ot_crispr",
      datatype-id: "ot_partner",
      unique-fields: [
        "studyId",
        "diseaseFromSourceMappedId",
        "targetFromSourceId",
        "resourceScore"
      ],
      score-expr: "1.0"
    },
    {
      id: "orphanet",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSourceId"
      ],
      score-expr: "element_at(map('Assessed', 1.0,'Not yet assessed', 0.5), confidence)"
    },
    {
      id: "impc",
      unique-fields: [
        "diseaseFromSource",
        "biologicalModelAllelicComposition",
        "targetInModel",
        "biologicalModelGeneticBackground"
      ],
      score-expr: "resourceScore / 100"
    },
    {
      id: "crispr",
      score-expr: "linear_rescale(resourceScore, 41.5, 100, 0.415, 1.0)",
      unique-fields: []
    },
    {
      id: "progeny",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "reactome",
      unique-fields: [
        "variantAminoacidDescriptions",
        "targetModulation",
        "reactionId"
      ],
      score-expr: "1.0"
    },
    {
      id: "slapenrich",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "sysbio",
      unique-fields: [
        "studyOverview",
        "literature",
        "pathways"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "uniprot_literature"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "clingen"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "studyId",
        "allelicRequirements",
      ],
      score-expr: """
      element_at(
        map(
          'No Known Disease Relationship', 0.01,
          'Refuted', 0.01,
          'Disputed', 0.01,
          'Limited', 0.01,
          'Moderate', 0.5,
          'Strong', 1.0,
          'Definitive', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "cancer_biomarkers"
      unique-fields: [
        "biomarkerName",
        "confidence",
        "diseaseFromSource",
        "drugFromSource",
        "drugResponse"
      ],
      score-expr: "1.0"
    }
  ]
}

gene-ontology {
  go-input = {
    format = "csv"
    path = "s3a://ccdi-demo-mtp-temporary-bucket-inputs/go.obo"
  }
  output {
    format = ${common.output-format}
    path = "s3a://ccdi-demo-mtp-temporary-bucket-outputs/"
  }
}

associations {
  outputs = {
    direct-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeDirect"
    }
    direct-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceDirect"
    }
    direct-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallDirect"
    }
    indirect-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceIndirect"
    }
    indirect-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeIndirect"
    }
    indirect-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallIndirect"
    }
  }
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      path = ${common.output}"/diseases"
      format = ${common.output-format}
    }
  }

  default-weight = 1.0
  default-propagate = true
  data-sources = [
    {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true},
    {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false},
    {id: "impc", weight: 0.2, data-type = "animal_model", propagate = true},
    {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "cancer_biomarkers", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "ot_crispr", weight: 0.5, data-type = "ot_partner", propagate = true},
    {id: "encore", weight: 0.5, data-type = "ot_partner", propagate = true},
    {id: "ot_crispr_validation", weight: 0.5, data-type = "ot_partner", propagate = true},
  ]
}

aotf {
  outputs = {
    clickhouse = {
      format = ${common.output-format}
      path = ${common.output}"/AOTFClickhouse"
    }
    elasticsearch = {
      format = "json"
      path = ${common.output}"/AOTFElasticsearch"
    }
  }

  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }
}

search {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    disease-hpo = ${disease.outputs.disease-hpo}
    hpo = ${disease.outputs.hpo}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
    associations = ${associations.outputs.indirect-by-overall}
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.output}"/searchTarget"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/searchDisease"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.output}"/searchDrug"
    }
  }
}


ebisearch {
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  evidence-etl {
    format = ${common.output-format}
    path = ${evidences.outputs.succeeded.path}"/sourceId=ot_genetics_portal/"
  }
  association-etl = ${associations.outputs.direct-by-overall}
  outputs = {
    ebisearch-associations {
      format = ${common.output-format}
      path = ${common.output}"/ebisearchAssociations"
    }
    ebisearch-evidence {
      format = ${common.output-format}
      path = ${common.output}"/ebisearchEvidence"
    }
  }
}


otarproject {
  disease-etl = ${disease.outputs.diseases}
  otar {
    format = "csv"
    path = ${common.input}"/otar-inputs/otar_projects.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/otar_projects"
  }
}
