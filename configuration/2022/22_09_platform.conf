// --- UPDATE THIS --- //
spark-settings.write-mode = "ignore"
// common.output-format = "json"
data_version = "development"
chembl_version = "30"
ensembl_version = "106"
evidences.data-sources-exclude = ["ot_crispr", "encore", "ot_crispr_validation"]
// --- END - UPDATE THIS --- //

// --- NO NEED TO CHANGE ANYTHING HERE --- //
etl-dag.resolve = false
etl-dag.steps = [
                    {step: "disease", dependencies: []},
                    {step: "reactome", dependencies: []},
                    {step: "expression", dependencies: []},
                    {step: "go", dependencies: []},
                    {step: "target", dependencies: ["reactome"]},
                    {step: "interaction", dependencies: ["target"]},
                    {step: "targetValidation", dependencies: ["target"]},
                    {step: "evidence", dependencies: ["disease", "target"]},
                    {step: "association", dependencies: ["evidence", "disease"]},
                    {step: "associationOTF", dependencies: ["evidence", "target", "disease", "reactome"]},
                    {step: "search", dependencies: ["target", "drug", "evidence", "association", "disease"]},
                    {step: "drug", dependencies: ["target", "evidence"]},
                    {step: "knownDrug", dependencies: ["target", "disease", "drug", "evidence"]},
                    {step: "ebisearch", dependencies: ["target", "disease", "evidence", "association"]},
                    {step: "fda", dependencies: ["drug"]},
                  ]

// Reactome --- //
reactome.inputs.pathways.path = ${common.input}"/reactome-inputs/ReactomePathways.txt"
reactome.inputs.relations.path = ${common.input}"/reactome-inputs/ReactomePathwaysRelation.txt"
// Target --- //
target.input.chemical-probes.path = ${common.input}"/target-inputs/chemicalprobes/chemicalprobes.json"
target.input.ensembl.path = ${common.input}"/target-inputs/ensembl/homo_sapiens.jsonl"
target.input.hgnc.path = ${common.input}"/target-inputs/genenames/hgnc_complete_set.json"
target.input.genetic-constraints.path = ${common.input}"/target-inputs/gnomad/gnomad_lof_by_gene.txt.gz"
target.input.gene-ontology-rna-lookup.path = ${common.input}"/target-inputs/go/ensembl.tsv"
target.input.gene-ontology.path = ${common.input}"/target-inputs/go/goa_human.gaf.gz"
target.input.gene-ontology-eco.path = ${common.input}"/target-inputs/go/goa_human_eco.gpa.gz"
target.input.gene-ontology-rna.path = ${common.input}"/target-inputs/go/goa_human_rna.gaf.gz"
target.input.hallmarks.path = ${common.input}"/target-inputs/hallmarks/cosmic-hallmarks.tsv.gz"
target.input.homology-dictionary.path = ${common.input}"/target-inputs/homologue/species_EnsemblVertebrates.txt"
target.input.homology-coding-proteins.path = ${common.input}"/target-inputs/homologue/c*.tsv.gz"
target.input.homology-gene-dictionary.path = ${common.input}"/target-inputs/homologue/"${ensembl_version}"/"${ensembl_version}"-*.tsv"
target.input.hpa.path = ${common.input}"/target-inputs/hpa/subcellular_location.tsv.gz"
target.input.hpa-sl-ontology.path = ${common.input}"/target-inputs/hpa/subcellular_locations_ssl.tsv"
target.input.ncbi.path = ${common.input}"/target-inputs/ncbi/Homo_sapiens.gene_info.gz"
target.input.ps-essentiality-matrix.path = ${common.input}"/target-inputs/project-scores/04_binaryDepScores.tsv"
target.input.ps-gene-identifier.path = ${common.input}"/target-inputs/project-scores/gene_identifiers_latest.csv.gz"
target.input.reactome-pathways.path = ${common.input}"/target-inputs/reactome/Ensembl2Reactome.txt"
target.input.safety-adverse-event.path = ${common.input}"/target-inputs/safety/adverse_events/adverse_event_safety.json"
target.input.safety-safety-risk.path = ${common.input}"/target-inputs/safety/safety_risk/sr.json"
target.input.safety-toxicity.path = ${common.input}"/target-inputs/safety/toxcast/ToxCast.tsv"
target.input.tep.path = ${common.input}"/target-inputs/tep/tep.json.gz"
target.input.tractability.path = ${common.input}"/target-inputs/tractability/tractability.tsv"
target.input.uniprot.path = ${common.input}"/target-inputs/uniprot/uniprot.txt.gz"
target.input.uniprot-ssl.path = ${common.input}"/target-inputs/uniprot/uniprot-ssl.tsv.gz"
// Mouse Phenotypes Inputs --- //
target-validation.inputs = [
  {
    name = "mousePhenotypes"
    id-column = "targetFromSourceId"
    data = {
      format = "json"
      path = ${common.input}"/mouse-phenotypes-inputs/mouse_phenotypes.json.gz"
    }
  }
]